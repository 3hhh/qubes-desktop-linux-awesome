----------------------------------------------------------------------------
-- Qubes OS bridge
-- @copyright 2014 Invisible Things Lab
-- @copyright 2014 Wojciech Porczyk <woju@invisiblethingslab.com>
-- license: GPL-2+
----------------------------------------------------------------------------

local io = io
local math = math
local string = string
local tonumber = tonumber
local table = table

local client = require('awful.client')
local util = require('awful.util')
local color = require('gears.color')
local beautiful = require('beautiful')
local menubar = require('menubar')

local qubes = {}

local HOME = os.getenv("HOME")

-- the following three functions are lifted from
--  /usr/lib64/python2.7/colorsys.py

-- XXX this belongs to /usr/share/awesome/lib/gears/colors.lua

local function rgb_to_hls(r, g, b)
    maxc = math.max(r, g, b)
    minc = math.min(r, g, b)
    -- XXX Can optimize (maxc+minc) and (maxc-minc)
    l = (minc+maxc)/2.0
    if minc == maxc then
        return 0.0, l, 0.0
    end
    if l <= 0.5 then
        s = (maxc-minc) / (maxc+minc)
    else
        s = (maxc-minc) / (2.0-maxc-minc)
    end
    rc = (maxc-r) / (maxc-minc)
    gc = (maxc-g) / (maxc-minc)
    bc = (maxc-b) / (maxc-minc)
    if r == maxc then
        h = bc-gc
    elseif g == maxc then
        h = 2.0+rc-bc
    else
        h = 4.0+gc-rc
    end
    h = (h/6.0) % 1.0
    return h, l, s
end

local function v(m1, m2, hue)
    hue = hue % 1.0
    if hue < 1/6 then
        return m1 + (m2-m1)*hue*6.0
    end
    if hue < 0.5 then
        return m2
    end
    if hue < 2/3 then
        return m1 + (m2-m1)*(2/3-hue)*6.0
    end
    return m1
end

local function hls_to_rgb(h, l, s)
    if s == 0.0 then
        return l, l, l
    end
    if l <= 0.5 then
        m2 = l * (1.0+s)
    else
        m2 = l+s-(l*s)
    end
    m1 = 2.0*l - m2
    return v(m1, m2, h+1/3), v(m1, m2, h), v(m1, m2, h-1/3)
end

-- end of codelifting

local function ensure_min_luminance(colour, minLuminance)
    local r, g, b = color.parse_color(colour)

    h, l, s = rgb_to_hls(r, g, b)
    l = math.max(l,minLuminance)
    r, g, b = hls_to_rgb(h, l, s)

    return string.format('#%02x%02x%02x',
        math.floor(r * 0xff), math.floor(g * 0xff), math.floor(b * 0xff))
end

local function shift_luminance(colour, factor)
    local r, g, b = color.parse_color(colour)

    h, l, s = rgb_to_hls(r, g, b)
    l = math.max(math.min(l * factor, 1), 0)
    r, g, b = hls_to_rgb(h, l, s)

    return string.format('#%02x%02x%02x',
        math.floor(r * 0xff), math.floor(g * 0xff), math.floor(b * 0xff))
end

local function color_dec2hex(dec_color,default)
    if dec_color == nil or dec_color == '' then 
        return default
    else
        return string.format("#%06x", dec_color)
    end
end

function qubes.manage(c)
    local data = util.pread('xprop -id ' .. c.window
        .. ' -notype _QUBES_VMNAME _QUBES_LABEL _QUBES_LABEL_COLOR')

    --set some window properties for information
    client.property.set(c, 'qubes_vmname',
        string.match(data, '_QUBES_VMNAME = "(.+)"') or 'dom0')
    client.property.set(c, 'qubes_label',
        string.match(data, '_QUBES_LABEL = (%d+)') or '*')
    local qcolor = color_dec2hex(string.match(data, '_QUBES_LABEL_COLOR = (%d+)'), '#000000')
    client.property.set(c, 'qubes_label_color', qcolor)
    client.property.set(c, 'prefix',
        '[' .. client.property.get(c, 'qubes_vmname') .. '] ')

    --set the focus & unfocus colors for later usage
    local qcolor_focus = ensure_min_luminance(qcolor, 0.3)
    client.property.set(c, 'qubes_label_color_focus', qcolor_focus)
    client.property.set(c, 'qubes_label_color_unfocus', shift_luminance(qcolor_focus, 0.6))

    --set the initial border color
    qubes.set_border_colour(c)
end

function qubes.set_border_colour(c)
    --assume focus by default - it might not be set due to a racing condition in client.manage()
    if (client.focus.window == nil) or (c == client.focus) then
        c.border_color = qubes.get_colour_focus(c)
    else
        c.border_color = qubes.get_colour(c)
    end
end

local function get_colour_by_state(c, state)
    local color = client.property.get(c, state)
    if color == nil or color == '' then
        qubes.manage(c)
        color = client.property.get(c, state)
    end
    return color
end

function qubes.get_colour(c)
    return get_colour_by_state(c, 'qubes_label_color_unfocus')
end

function qubes.get_colour_focus(c)
    return get_colour_by_state(c, 'qubes_label_color_focus')
end

function is_accessible(path)
    return os.rename(path, path) and true or false
end

function qubes.make_menuitem(vm, program)
    local appicon = program.icon_path
    if not is_accessible(appicon) then appicon = nil end

    return {program.Name, program.cmdline, appicon}
end

--all parameters except for vmname are optional
function qubes.make_vm_menu(vmname, menuitemfunc, vmapps, vmicon)
    local menu = {}
    local vmapps = vmapps or HOME .. '/.local/share/qubes-appmenus/' .. vmname .. '/apps/'
    local menuitemfunc = menuitemfunc or qubes.make_menuitem
    local vmicon = vmicon or '/var/lib/qubes/appvms/' .. vmname .. '/icon.png'

    if not is_accessible(vmapps) then return nil end

    for _, program in ipairs(menubar.utils.parse_dir(vmapps)) do
        local menuitem = menuitemfunc(vmname, program)
        if menuitem ~= nil then table.insert(menu, menuitem) end
    end

    --NOTE: awesome will not display menu entries with invalid icon paths
    return {vmname, menu, vmicon}
end

--filter & menuitemfunc are optional parameters
function qubes.make_menu(filter, menuitemfunc)
    local menu = {}

    --set reasonable defaults
    local menufunc = qubes.make_vm_menu
    if filter ~= nil then menufunc = filter(vmname) end
    local menuitemfunc = menuitemfunc or qubes.make_menuitem

    --add the dom0 menu
    --this is enitrely optional and enables users to create xdg desktop files at the below file path in order to populate the dom0 menu
    --it will remain invisible until that directory is accessible
    table.insert(menu, qubes.make_vm_menu('Dom0', nil, HOME .. '/.config/awesome/dom0-menu/', '/usr/share/icons/hicolor/16x16/apps/qubes-logo-icon.png'))

    --add the VM application menus
    for vmname in io.popen([[python -c "
from qubesadmin import Qubes
app = Qubes()
ret = []
for vm in app.domains: ret.append(vm.name)
ret.sort(key=lambda i: i.lower())
print('\n'.join(ret))
"]]):lines() do
        table.insert(menu, menufunc(vmname, menuitemfunc))
    end

    return menu
end

return qubes

-- vim: ts=4 sw=4 et
