diff --git a/lib/qubes.lua.in b/lib/qubes.lua.in
index f992118..c38ef26 100644
--- a/lib/qubes.lua.in
+++ b/lib/qubes.lua.in
@@ -113,63 +113,61 @@ local function shift_luminance(colour, factor)
         math.floor(r * 0xff), math.floor(g * 0xff), math.floor(b * 0xff))
 end
 
-function qubes.init()
-    local minLuminance = 0.3
-    local shiftUnfocused = 0.5
-    local blackSafe = ensure_min_luminance("#000000", minLuminance)
-
-    -- read labels
-    qubes.labels = { ['*'] = {
-	--all other (= dom0) windows
-        colour = shift_luminance(blackSafe, shiftUnfocused),
-        colour_focus = blackSafe 
-     } }
-
-    local data = util.pread([[python -c "
-import qubes.qubes
-print(''.join('{}:{}\n'.format(l.index, l.color)
-    for l in qubes.qubes.QubesVmLabels.values()))
-"]])
-    for index, colour in string.gmatch(data, '(%d):0x([0-9a-f]+)') do
-        colour = '#' .. colour
-	--ensure min luminance so we can shift it for unfocused windows
-        colour = ensure_min_luminance(colour,minLuminance)
-
-        qubes.labels[index] = { colour = shift_luminance(colour, shiftUnfocused),
-            colour_focus = colour }
+local function color_dec2hex(dec_color,default)
+    if dec_color == nil or dec_color == '' then 
+        return default
+    else
+        return string.format("#%06x", dec_color)
     end
 end
 
 function qubes.manage(c)
-    if client.property.get(c, 'qubes_vmname') ~= nil then return end
-
     local data = util.pread('xprop -id ' .. c.window
-        .. ' -notype _QUBES_VMNAME _QUBES_LABEL')
+        .. ' -notype _QUBES_VMNAME _QUBES_LABEL _QUBES_LABEL_COLOR')
 
+    --set some window properties for information
     client.property.set(c, 'qubes_vmname',
         string.match(data, '_QUBES_VMNAME = "(.+)"') or 'dom0')
     client.property.set(c, 'qubes_label',
         string.match(data, '_QUBES_LABEL = (%d+)') or '*')
-
+    local qcolor = color_dec2hex(string.match(data, '_QUBES_LABEL_COLOR = (%d+)'), '#000000')
+    client.property.set(c, 'qubes_label_color', qcolor)
     client.property.set(c, 'prefix',
         '[' .. client.property.get(c, 'qubes_vmname') .. '] ')
-    c.border_color = qubes.get_colour_focus (c)
+
+    --set the focus & unfocus colors for later usage
+    local qcolor_focus = ensure_min_luminance(qcolor, 0.3)
+    client.property.set(c, 'qubes_label_color_focus', qcolor_focus)
+    client.property.set(c, 'qubes_label_color_unfocus', shift_luminance(qcolor_focus, 0.6))
+
+    --set the initial border color
+    qubes.set_border_colour(c)
+end
+
+function qubes.set_border_colour(c)
+    --assume focus by default - it might not be set due to a racing condition in client.manage()
+    if (client.focus.window == nil) or (c == client.focus) then
+        c.border_color = qubes.get_colour_focus(c)
+    else
+        c.border_color = qubes.get_colour(c)
+    end
 end
 
-function qubes.get_label(c)
-    if qubes.labels == nil then
-        qubes.init()
+local function get_colour_by_state(c, state)
+    local color = client.property.get(c, state)
+    if color == nil or color == '' then
+        qubes.manage(c)
+        color = client.property.get(c, state)
     end
-    local label = client.property.get(c, 'qubes_label')
-    return qubes.labels[label] or qubes.labels['*']
+    return color
 end
 
 function qubes.get_colour(c)
-    return qubes.get_label(c).colour
+    return get_colour_by_state(c, 'qubes_label_color_unfocus')
 end
 
 function qubes.get_colour_focus(c)
-    return qubes.get_label(c).colour_focus
+    return get_colour_by_state(c, 'qubes_label_color_focus')
 end
 
 function qubes.make_vm_menu(vmname, vmpath)
